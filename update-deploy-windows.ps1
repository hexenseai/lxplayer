# LXPlayer Windows Git Update & Deploy Script
# Bu script Windows'tan Git pull ile projeyi g√ºnceller

param(
    [Parameter(Mandatory=$true)]
    [string]$ServerIP,
    
    [Parameter(Mandatory=$false)]
    [string]$Username = $env:USERNAME,
    
    [Parameter(Mandatory=$false)]
    [string]$Branch = "main",
    
    [Parameter(Mandatory=$false)]
    [string]$DeployDir = "/opt/lxplayer"
)

# Renk fonksiyonlarƒ±
function Write-ColorOutput($ForegroundColor) {
    $fc = $host.UI.RawUI.ForegroundColor
    $host.UI.RawUI.ForegroundColor = $ForegroundColor
    if ($args) {
        Write-Output $args
    }
    $host.UI.RawUI.ForegroundColor = $fc
}

function Write-Log($Message) {
    Write-ColorOutput Green "[$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')] $Message"
}

function Write-Warning($Message) {
    Write-ColorOutput Yellow "[$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')] WARNING: $Message"
}

function Write-Error($Message) {
    Write-ColorOutput Red "[$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')] ERROR: $Message"
    exit 1
}

function Write-Info($Message) {
    Write-ColorOutput Blue "[$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')] INFO: $Message"
}

# Kullanƒ±m kontrol√º
if (-not $ServerIP) {
    Write-Error "Server IP adresi gerekli!"
    Write-Host "Kullanƒ±m: .\update-deploy-windows.ps1 -ServerIP <ip> [-Username <user>] [-Branch <branch>] [-DeployDir <dir>]"
    exit 1
}

Write-Log "LXPlayer Windows Git Update & Deploy ba≈ülatƒ±lƒ±yor..."
Write-Log "Sunucu: $ServerIP"
Write-Log "Kullanƒ±cƒ±: $Username"
Write-Log "Branch: $Branch"
Write-Log "Deploy Directory: $DeployDir"

# SSH baƒülantƒ±sƒ±nƒ± test etme
Write-Log "SSH baƒülantƒ±sƒ± test ediliyor..."
try {
    $sshTest = ssh -o ConnectTimeout=10 $Username@$ServerIP "echo 'SSH connection successful'"
    if ($LASTEXITCODE -ne 0) {
        Write-Warning "SSH key ile baƒülantƒ± ba≈üarƒ±sƒ±z. ≈ûifre ile baƒülanmayƒ± deneyeceƒüiz."
    }
} catch {
    Write-Warning "SSH key ile baƒülantƒ± ba≈üarƒ±sƒ±z. ≈ûifre ile baƒülanmayƒ± deneyeceƒüiz."
}

# Sunucuda g√ºncelleme scriptini √ßalƒ±≈ütƒ±rma
Write-Log "Sunucuda Git g√ºncellemesi yapƒ±lƒ±yor..."
$updateScript = @"
set -e

# Proje dizinine git
cd $DeployDir

# Git durumunu kontrol et
if [ ! -d ".git" ]; then
    echo "‚ùå Git repository bulunamadƒ±! L√ºtfen √∂nce projeyi clone edin."
    exit 1
fi

# Mevcut deƒüi≈üiklikleri stash et (eƒüer varsa)
if ! git diff-index --quiet HEAD --; then
    echo "‚ö†Ô∏è  Yerel deƒüi≈üiklikler bulundu, stash ediliyor..."
    git stash push -m "Auto stash before update $(date)"
fi

# Remote'dan g√ºncellemeleri √ßek
echo "üì• Remote'dan g√ºncellemeler √ßekiliyor..."
git fetch origin

# Branch'i kontrol et ve g√ºncelle
current_branch=\$(git branch --show-current)
if [ "\$current_branch" != "$Branch" ]; then
    echo "üîÑ Branch deƒüi≈ütiriliyor: \$current_branch -> $Branch"
    git checkout $Branch
fi

# Remote ile senkronize et
echo "üîÑ Remote ile senkronize ediliyor..."
git reset --hard origin/$Branch
git clean -fd

# Son commit bilgisini g√∂ster
echo "üìã Son commit:"
git log --oneline -1

# Environment dosyasƒ± kontrol√º
if [ ! -f ".env" ]; then
    if [ -f "env.production.template" ]; then
        echo "‚ö†Ô∏è  Environment dosyasƒ± olu≈üturuluyor..."
        cp env.production.template .env
        echo "‚ö†Ô∏è  L√ºtfen .env dosyasƒ±nƒ± production ayarlarƒ±nƒ±zla g√ºncelleyin!"
    fi
fi

# Docker Compose dosyasƒ± kontrol√º
if [ ! -f "docker-compose.yml" ]; then
    if [ -f "docker-compose.prod.yml" ]; then
        echo "üìÑ Docker Compose dosyasƒ± kopyalanƒ±yor..."
        cp docker-compose.prod.yml docker-compose.yml
    fi
fi

# Mevcut servisleri durdur
echo "üõë Mevcut servisler durduruluyor..."
docker-compose down || true

# Docker image'larƒ±nƒ± yeniden build et
echo "üî® Docker image'larƒ± build ediliyor..."
docker-compose build --no-cache

# Servisleri ba≈ülat
echo "üöÄ Servisler ba≈ülatƒ±lƒ±yor..."
docker-compose up -d

# Health check
echo "üè• Health check yapƒ±lƒ±yor..."
sleep 10

# Servis durumunu kontrol et
if docker-compose ps | grep -q "Up"; then
    echo "‚úÖ G√ºncelleme ba≈üarƒ±lƒ±!"
    echo ""
    echo "üìä Servis durumu:"
    docker-compose ps
else
    echo "‚ùå G√ºncelleme ba≈üarƒ±sƒ±z! Loglarƒ± kontrol edin."
    docker-compose logs --tail=50
    exit 1
fi
"@

# Script'i sunucuya g√∂nderme ve √ßalƒ±≈ütƒ±rma
Write-Log "G√ºncelleme scripti sunucuya g√∂nderiliyor..."
$updateScript | ssh $Username@$ServerIP "cat > /tmp/update.sh && chmod +x /tmp/update.sh && /tmp/update.sh"

# Systemd service g√ºncelleme (eƒüer varsa)
Write-Log "Systemd service kontrol ediliyor..."
$serviceCheck = ssh $Username@$ServerIP "[ -f '/etc/systemd/system/lxplayer.service' ] && echo 'exists'"
if ($serviceCheck -eq "exists") {
    Write-Log "Systemd service g√ºncelleniyor..."
    ssh $Username@$ServerIP "sudo systemctl daemon-reload && sudo systemctl restart lxplayer"
}

Write-Log "‚úÖ Git Update & Deploy tamamlandƒ±!"
Write-Host ""
Write-Host "üåê Uygulama ≈üu adreslerde eri≈üilebilir:"
Write-Host "   - Web: http://$ServerIP"
Write-Host "   - API: http://$ServerIP/api"
Write-Host "   - MinIO Console: http://$ServerIP/minio"
Write-Host ""
Write-Host "üìä Servis durumu kontrol etmek i√ßin:"
Write-Host "   ssh $Username@$ServerIP 'cd $DeployDir && docker-compose ps'"
Write-Host ""
Write-Host "üìù Loglarƒ± g√∂r√ºnt√ºlemek i√ßin:"
Write-Host "   ssh $Username@$ServerIP 'cd $DeployDir && docker-compose logs -f'"
Write-Host ""
Write-Host "üîÑ Hƒ±zlƒ± g√ºncelleme i√ßin:"
Write-Host "   .\update-deploy-windows.ps1 -ServerIP $ServerIP -Username $Username -Branch $Branch -DeployDir $DeployDir"
